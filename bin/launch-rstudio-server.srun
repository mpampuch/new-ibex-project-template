#!/bin/bash --login

set -e

echo "Launching RStudio Server in a Singularity Container, this may take some time (10+ minutes)" 1>&2

# load singularity module
module load singularity/3.9.7

# Set R version (either 4.0.5 or 4.1.1 *NOTE: 4.1.1 image seems to be broken so doesn't seem like you can use this one)
R_version="4.0.5"
export R_version

# Pull singularity image
# Choose if verbose (1 = true, 0 = false)
verbose=1
if [ $verbose -eq 1 ]; then
   singularity --verbose pull --force --disable-cache "docker://ranaselim8/rstudio-server:${R_version}"
else
   singularity pull --force --disable-cache "docker://ranaselim8/rstudio-server:${R_version}"
fi
###################################


# Create temporary directory to be populated with directories to bind-mount in the container
# where writable file systems are necessary. Adjust path as appropriate for your computing environment.
workdir=$(python -c 'import tempfile; print(tempfile.mkdtemp())')

mkdir -p -m 700 "${workdir}"/run "${workdir}"/tmp "${workdir}"/var/lib/rstudio-server
cat > "${workdir}"/database.conf <<END
provider=sqlite
directory=/var/lib/rstudio-server
END

# Set OMP_NUM_THREADS to prevent OpenBLAS (and any other OpenMP-enhanced
# libraries used by R) from spawning more threads than the number of processors
# allocated to the job.
#
# Set R_LIBS_USER to a path specific to rocker/rstudio to avoid conflicts with
# personal libraries from any R installation in the host environment

cat > "${workdir}"/rsession.sh <<END
#!/bin/bash
export OMP_NUM_THREADS=${SLURM_JOB_CPUS_PER_NODE}
export R_LIBS_USER=${HOME}/R/rocker-rstudio/${R_version}
exec rsession "\${@}"
END

chmod +x "${workdir}"/rsession.sh

# TEST: modify the script so that the home directory is not mounted inside the RStudio Server container, but rather the directory from where the script is called, 
# Set the bind path to the directory from where the script is called
bind_path=$(realpath .)
export SINGULARITY_BIND="${bind_path}:/mnt,${workdir}/run:/run,${workdir}/tmp:/tmp,${workdir}/database.conf:/etc/rstudio/database.conf,${workdir}/rsession.sh:/etc/rstudio/rsession.sh,${workdir}/var/lib/rstudio-server:/var/lib/rstudio-server"

# Old version (without binding current project folder)
# export SINGULARITY_BIND="${workdir}/run:/run,${workdir}/tmp:/tmp,${workdir}/database.conf:/etc/rstudio/database.conf,${workdir}/rsession.sh:/etc/rstudio/rsession.sh,${workdir}/var/lib/rstudio-server:/var/lib/rstudio-server"


# Do not suspend idle sessions.
# Alternative to setting session-timeout-minutes=0 in /etc/rstudio/rsession.conf
# https://github.com/rstudio/rstudio/blob/v1.4.1106/src/cpp/server/ServerSessionManager.cpp#L126
export SINGULARITYENV_RSTUDIO_SESSION_TIMEOUT=0

SINGULARITYENV_USER=$(id -un)
export SINGULARITYENV_USER
SINGULARITYENV_PASSWORD=$(openssl rand -base64 15)
export SINGULARITYENV_PASSWORD
# get unused socket per https://unix.stackexchange.com/a/132524
# tiny race condition between the python & singularity commands
PORT=$(python -c 'import socket; s=socket.socket(); s.bind(("", 0)); print(s.getsockname()[1]); s.close()')
readonly PORT

# collect the date and time the instance started running
DATE_TIME=$(date)

cat 1>&2 <<END

(Instance started running: ${DATE_TIME})

1. SSH tunnel from your workstation using the following command:

      ssh -L ${PORT}:${HOSTNAME}:${PORT} ${SINGULARITYENV_USER}@ilogin.ibex.kaust.edu.sa

   and point your web browser to
   
      http://localhost:${PORT}

2. log in to RStudio Server using the following credentials:

      user: ${SINGULARITYENV_USER}
      password: ${SINGULARITYENV_PASSWORD}

3. Before beginning any work in RStudio Server, enter the following command into the R console and/or at the start of your R scripts

      setwd("/mnt")
   
   After doing that, in the "Files" pane, click on 
   
      "More" (the gear icon) -> "Go To Working Directory" 

   Now you're ready to begin working in RStudio Server. Any files you create will automatically appear in your project directory in IBEX.
   
      NOTE: If you are creating a new R project from RStudio Server, make sure you create the project as a subdirectory of /mnt

When done using RStudio Server, terminate the job by:

1. Exit the RStudio Session ("power" button in the top right corner of the RStudio window)
2. Issue the following command on the login node:

      scancel -f ${SLURM_JOB_ID}
END

singularity exec --cleanenv rstudio-server_"${R_version}".sif \
    rserver --www-port="${PORT}" \
            --auth-none=0 \
            --auth-pam-helper-path=pam-helper \
            --auth-stay-signed-in-days=30 \
            --auth-timeout-minutes=0 \
            --rsession-path=/etc/rstudio/rsession.sh
printf 'rserver exited' 1>&2                                                         
